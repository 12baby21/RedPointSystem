---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wujunfei.
--- DateTime: 2025/5/21 15:23
--- 两种红点树，一种是一开始就构造好的，一种是在游戏中动态添加的
--- 每棵红点树都是一棵字典树，用id作为唯一标识
--- 采用红点森林的目的主要是为了解决部分红点不需要穿透的问题
--- 提供对外接口
---

---@class RedPointManager
local RedPointManager = class("RedPointManager")
---@type RedPointTree
local RedPointTree = require("RedPointTree")
---@type LuaUtils
local LuaUtils = require("LuaUtils")
---@type RedPointStruct
local RedPointStruct = require("RedPointStruct")


function RedPointManager:ctor()
    ---@type RedPointTree[]
    self.redPointForest = {}            -- 红点森林，方便管理孤立结点，key为红点id
    ---@type RedPointStruct[][]
    self.eventObserverMap = {}          -- 事件观察者，通过事件触发红点，key为事件string
    self.uiRedPointMap = {}             -- 管理UI，事件触发时，要刷新的红点
end

--- 通过完整路径注册
function RedPointManager:register(redPointParams)
    local ids = LuaUtils.splitString(redPointParams.idString, "|")
    local rootId = checkint(ids[1])
    local insertResult = false          -- 插入成功才需要
    if self.redPointForest[rootId] == nil then
        --- 没有这颗树，直接构造一颗新的红点树
        self.redPointForest[rootId] = RedPointTree.new(redPointParams)
        insertResult = true
    else
        local redPointTree = self.redPointForest[rootId]
        insertResult = redPointTree:insertNode(ids)
    end
    local redPointStruct = self.redPointForest[rootId]:getRedPointNode(checkint(ids[#ids]))
    local triggerEvents = redPointParams.events
    for _, event in ipairs(triggerEvents) do
        if not self.eventObserverMap[event] then
            self.eventObserverMap[event] = {}
        end
        local eventObserver = self.eventObserverMap[event]
        eventObserver[#eventObserver+1] = redPointStruct
    end
end

function RedPointManager:registerToParent(parentId, redId)
    if not parentId or parentId == 0 then
        dump(string.format("无法注册父红点id为%d的红点", parentId))
        return
    end
    assert(redId and redId > 0, "红点id有误")
    local parentNode = self:getRedPointNodeById(parentId)
    if parentNode then
        local parentIdString = parentNode:getIdString()
        local idString = table.concat({parentIdString, "|", redId})
        self:register({
            idString = idString,
        })
    end

end

function RedPointManager:unregister(idString)
    local ids = LuaUtils.splitString(idString, "|")
    local redPointStruct = self:getRedPointNode(idString)
    if not redPointStruct then
        dump(ids, "删除失败，没有找到当前层级结构的红点：")
        return
    end
    --- 删除事件观察者
    local events = redPointStruct:getTriggerEvents()
    for _, event in ipairs(events) do
        local eventObserver = self.eventObserverMap[event]
        for pos, v in ipairs(eventObserver) do
            if v.id == redPointStruct.id then
                -- todo: 用map性能优化？
                table.remove(eventObserver, pos)
                break
            end
        end
    end

    --- 从红点树上移除
    local redPointTree = self.redPointForest[checkint(ids[1])]
    if redPointTree then
        -- todo 直接从父结点删除
        redPointTree:deleteRedPointStruct()
    end
end

---getRedPointNode 获取某一棵红点树上的具体红点
---@param idString string
---@return RedPointStruct
function RedPointManager:getRedPointNode(idString)
    local ids = LuaUtils.splitString(idString, "|")
    local redPointTree = self.redPointForest[checkint(ids[1])]
    if redPointTree then
        local redPointStruct = redPointTree:getRedPointNode(ids)
        return redPointStruct
    else
        dump(ids, "查找失败，没有找到当前层级结构的红点：")
    end
end

---getRedPointNodeById 通过唯一红点id获取红点（尽量不要使用）
function RedPointManager:getRedPointNodeById(id)
    for _, redPointTree in pairs(self.redPointForest) do
        local redPointStruct = redPointTree:getRedPointNodeById(id)
        if redPointStruct then
            return redPointStruct
        end
    end
    return nil
end

--- 进入界面时绑定红点ui(完整路径注册)
function RedPointManager:bind(uiRedPoint, idString)
    local redPointNode = self:getRedPointNode(idString)
    if redPointNode then
        self.uiRedPointMap[redPointNode:getId()] = uiRedPoint
    end
end


--- 离开界面时移除红点ui
function RedPointManager:unbind(idString)
    local redPointNode = self:getRedPointNode(idString)
    if redPointNode then
        self.uiRedPointMap[redPointNode:getId()] = nil
    end
end

function RedPointManager:onReceiveEvent(event, ...)
    local eventObserver = self.eventObserverMap[event] or {}
    for _, observer in ipairs(eventObserver) do
        local isShow, redPointType = observer:isShow(...)
        local redId = observer:getId()
        local uiRedPoint = self.uiRedPointMap[redId]
        uiRedPoint:setShow(isShow, redPointType)
    end
end


return RedPointManager