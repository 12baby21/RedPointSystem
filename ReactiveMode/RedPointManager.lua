---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wujunfei.
--- DateTime: 2025/7/15 10:27
---

local RedPointConst = require("RedPointConst")
local RedPointManager = class("RedPointManager")

function RedPointManager:ctor()
    ---@type table<number, table>
    self.rules = {}
end

---register Controller层注册
function RedPointManager:register(key, computeFunc, uiNode, options)
    if self._rules[key] then
        printInfo(string.format("[RedPoint] %s already registered:", key))
        return
    end

    local depends = options and options.depends or {}

    self._rules[key] = {
        key = key,
        compute = computeFunc,
        visible = false,
        uiNode = uiNode,
        showType = options and options.showType or RedPointConst.SHOW_TYPE.DEFAULT,
        depends = options and options.depends or {},          -- 依赖的子红点
        listeners = {},   -- 被其他红点监听
        visible = false
    }

    -- 监听子红点变化
    for _, subKey in ipairs(depends) do
        self:_watchRedPoint(subKey, function()
            self:update(subKey)
        end)
    end

    self:update(key)
end

function RedPointManager:bindUINode(key, uiNode)
    local rule = self.rules[key]
    if not rule then return end
    rule.uiNode = uiNode
    self:_applyDisplay(key)
end

function RedPointManager:_watchRedPoint(subKey, callback)
    local sub = self._rules[subKey]
    if not sub then
        print("[RedPoint] Missing dependent red point:", subKey)
        return
    end
    table.insert(sub.listeners, callback)
end

function RedPointManager:update(key)
    local rule = self._rules[key]
    if not rule then return end

    local newVisible = rule.compute()
    if rule.visible == newVisible then return end -- 没变化
    rule.visible = newVisible
    -- 通知依赖此红点的红点（父红点）
    for _, cb in ipairs(rule.listeners) do
        cb()
    end

    self:_applyDisplay(key)
end

---_applyDisplay 红点更新时根据类型渲染
---@param key string
function RedPointManager:_applyDisplay(key)
    local rule = self._rules[key]
    if not rule or not rule.uiNode then return end

    local node = rule.uiNode
    local show = rule.visible
    local t = rule.showType

    if t == RedPointConst.SHOW_TYPE.DEFAULT then
        node:setVisible(show)
    elseif t == RedPointConst.SHOW_TYPE.NUMBER then
        local num = rule.compute() or 0
        node:setVisible(num > 0)
        if node.setString then
            node:setString(tostring(num))
        end
    elseif t == RedPointConst.SHOW_TYPE.NEW then
        node:setVisible(show)
        if node.setString then
            node:setString("新")
        end
    elseif t == RedPointConst.SHOW_TYPE.NONE then
        -- 逻辑红点，不显示
    end
end




return RedPointManager
